import { Router } from "express";
import jwt, { JwtPayload } from "jsonwebtoken";
import db from "../../config/connection.js";
import path from "path";
import url from "url";

const __dirname = url.fileURLToPath(new URL(".", import.meta.url));

const router = Router();

const { JWT_SECRET } = process.env;

if (!JWT_SECRET) throw new Error("Missing environment variable: JWT_SECRET");

router.get("/:token", async (req, res) => {
  try {
    const { token } = req.params;
    // Verify token was generated by us
    const verifiedToken = jwt.verify(token, JWT_SECRET) as JwtPayload;
    // Retrieve data from emailVerification table related to JWT
    const emailVerificationRecord =
      await db.emailVerification.findUniqueOrThrow({
        where: { id: verifiedToken.id },
      });
    // Remove emailVerification record
    await db.emailVerification.delete({
      where: { id: emailVerificationRecord.id },
    });
    // Create verifiedEmail record
    await db.verifiedEmail.create({
      data: {
        email: emailVerificationRecord.email,
        userId: emailVerificationRecord.userId,
      },
    });
    // Get user to find whether they have a primary email recorded
    const user = await db.user.findUnique({
      where: { id: emailVerificationRecord.userId },
    });
    //
    if (!user?.primaryEmail)
      db.user.update({
        where: { id: emailVerificationRecord.userId },
        data: { primaryEmail: emailVerificationRecord.email },
      });
    res.sendFile(path.join(__dirname, "../../../client/dist/index.html"));
    // res.redirect("/");
  } catch (error) {
    console.log(error);
  }
});

export default router;
